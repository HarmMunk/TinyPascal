10 DEFINT A-Z
100 DEF FNUC$(A$)=CHR$((ASC(A$)>=ASC("a")AND ASC(A$)<=ASC("z"))*(ASC("a")-ASC("A"))+ASC(A$))
110 DEF FNLC$(A$)=CHR$((ASC(A$)>=ASC("A")AND ASC(A$)<=ASC("z"))*(ASC("A")-ASC("a"))+ASC(A$))
900 TDRIVER=1:INPUT"Source file base name (.PAS is assumed)";SFBN$:IF INSTR(SFBN$,".")<>0 THEN SFBN$=LEFT$(SFBN$,INSTR(SFBN$,".")-1)
905 SFN$=SFBN$+".PAS":OPEN"I",#1,SFN$
906 LFN$=SFBN$+".LST":OPEN"O",#2,LFN$
930 PFN$=SFBN$+".PCD":OPEN"R",#3,PFN$,4:FIELD#3,2 AS CO1$, 2 AS CO2$
1010 VERSION!=2.2
1020 T0=100:REM MAXIMUM SYMBOL TABLE SIZE
1030 MAXINT=32767
1040 N2=8:REM MAX IDENTIFIER LENGTH
1050 C1=0:C0=0:L0=0:REM:C0: CURRENT INPUT CHARACTER COLUMN NUMBER, L0: INPUT LINE NUMBER LENGTH
1060 DIM T$[T0]:REM SYMBOL TABLE: SYMBOL
1070 DIM T0$[T0]:REM SYMBOL TABLE: TYPE: C=CONSTANT, S=SYSTEM FUNCTION, F=FUNCTION, P=PROCEDURE, M=MAIN PROGRAM: O=ARRAY, E=ARRAY DIMENSION
1080 L1=0:REM SCOPE LEVEL
1090 DIM S[100],S$[100]: REM STACKS
1100 DIM T1[T0]:REM SYMBOL TABLE: BLOCK LEVEL
1110 DIM T2[T0]:REM SYMBOL TABLE: VALUE, OR PCODE OPERATION NR
1120 DIM T3[T0]:REM SYMBOL TABLE: "F" OR "P" NUMBER OF PARAMS
1130 RESTORE 1140:READ W0$:CR$=CHR$(13):ESC$=CHR$(27):AT$=CHR$(64):TABLEN=8:FIRSTINDENT=11
1131 I2=INSTR(W0$,","):I1=INSTR(I1+1,W0$,","):WHILE I1<>0:IDLEN=I1-I2-1:IF N2<IDLEN THEN N2=IDLEN
1132 I2=I1:I1=INSTR(I1+1,W0$,","):WEND
1140 DATA",AND,ARRAY,BEGIN,BOOLEAN,CASE,CHAR,CONST,DIV,DO,DOWNTO,ELSE,END,EXTERNAL,FOR,FORWARD,FUNCTION,IF,INTEGER,MOD,NOT,OF,OR,OTHERWISE,PROCEDURE,PROGRAM,REPEAT,SHL,SHR,THEN,TO,UNTIL,VAR,WHILE,"
1150 DIM M$[8]:REM P-CODE MNEMONICS
1160 RESTORE 1160:FOR I=O TO 8:READ M$[I]:NEXT:DATA LIT,OPR,LOD,STO,CAL,INT,JMP,JPC,CSP
1170 RESTORE 1180:READ N:FOR T1=1 TO N:READ T$[2*T1-1],T0$[2*T1-1],T1[2*T1-1],T2[2*T1-1],T3[2*T1-1]:T$[2*T1]=T$[2*T1-1]:T0$[2*T1]=T0$[2*T1-1]:T1[2*T1]=T1[2*T1-1]:T2[2*T1]=T2[2*T1-1]:T3[2*T1]=T3[2*T1-1]
1175 FOR I=1 TO LEN(T$[2*T1]):MID$(T$[2*T1],I,1)=FNLC$(MID$(T$[2*T1],I,1)):NEXT I:NEXT T1:T1=2*N:BI=T1:L1=-1
1180 DATA 14
1190 DATA TRUE,C,-1,1,0,FALSE,C,-1,0,0,MAXINT,C,-1,32767,0,MININT,C,-1,-32768,0,MEM,S,-1,0,0,ODD,F,-1,6,1,SUCC,F,-1,19,1,PRED,F,-1,20,1,READ,P,-1,0,-1,WRITE,P,-1,0,-1,WRITELN,P,-1,0,-1,BDOS,F,-1,22,2
1195 DATA STACKTOP,F,-1,23,1,CALL,P,-1,0,1
1200 GOSUB 1570
1210 P8=0
1220 P7=0:P9=P7
1230 Q9=0:REM Maximum p-code program size: IS NOW 2^16 / 2, SEE BELOW
1240 F5=1:F10=-1:EF=0:REM F5:?, F10:?, EF: ERROR FLAG
1250 PRINT"TINY PASCAL COMPILER"
1260 IF TDRIVER=0 THEN INPUT"Want listing";Y$:Y10=LEFT$(Y$,1)="Y"ELSE Y10=-1:REM Y10: Listing flag
1270 IF TDRIVER=0 THEN INPUT"Want symbol table";Y$:Y12=LEFT$(Y$,1)="Y"ELSE Y12=-1:REM Y12: Symbol table listing flag
1280 Y11=-1:REM INPUT"Want p-code file";Y$:Y11=LEFT$(Y$,1)="Y":REM Y11: Code file flag: ignored
1290 IF TDRIVER=0 THEN INPUT"Want code printed";Y$:Y9=LEFT$(Y$,1)="Y"ELSE Y9=0:REM Y9: Code printed flag
1300 Q9=16383:REM INPUT"p-code program size [default=2048 instructions]";Q9:IF Q9<0 THEN 1240 ELSE IF Q9=0 THEN Q9=2048 
1310 REM Q9=(Q9-1)*2:DIM CO[Q9]:REM CO: P-code program
1330 HD$="TINY-PASCAL P-CODE COMPILER VERSION"+STR$(VERSION!)
1340 HD1$="Line Loc. Source"
1350 PRINT HD$:PRINT HD1$:IF Y10 THEN PRINT#2,HD$:PRINT#2,HD1$
1370 X$=" ":GOSUB 1720
1380 K$="PROGRAM":E=35:GOSUB 1510:K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:T0$[T1]="M":T2[T1]=C1:GOSUB 1720:K$=";":E=7:GOSUB 1510:L1=L1+1:BI=T1:GOSUB 2610:L1=L1-1:T1=BI:GOSUB 3470:K$=".":E=6:GOSUB 1500
1390 LSET CO1$=MKI$(&HFFFF):LSET CO2$=MKI$(&HFFFF):PUT#3,C1+1:PRINT:REM CO[P9]=&HFFFF
1400 IF Y10 THEN PRINT#2,STRING$(3,13)ELSE PRINT STRING$(2,13)
1410 IF TDRIVER=0 THEN IF NOT Y9 THEN INPUT"Want to see P-codes";Y$
1420 IF LEFT$(Y$,1)="Y"OR Y9 THEN W0$="":ERASE T$,T0$,S,S$,T1,T2,T3,ER$:X=FRE(""):IF NOT EF THEN GOSUB 3070
1430 REM IF NOT Y11 THEN 1470
1440 CLOSE#1,#2,#3:IF EF THEN KILL PFN$
1445 IF EF THEN ?"ERRORS FOUND!"
1490 IF TDRIVER=0 OR EF THEN END ELSE EXITSTATUS=1:COMMON TDRIVER,EXITSTATUS,SFBN$:CHAIN"TRANS"
1500 IF S0$<>K$THEN E9=E:GOSUB 1520:STOP ELSE RETURN
1499 REM ********** CHOMP: EAT NEXT SYMBOL IF IS EQUAL TO K$ AND GET NEXT SYMBOL. OTHERWISE, THIS IS AN ERROR.
1510 GOSUB 1500:GOTO 1720
1519 REM ********** PRINT ERROR MESSAGE, RAISE ERROR FLAG
1520 PRINT TAB(C7)"^"E9:IF Y10 THEN PRINT#2,TAB(C7)"^" 
1530 GOSUB 1550:EF=-1
1540 RETURN
1550 PRINT ER$[E9-1]:IF Y10 THEN PRINT#2,ER$[E9-1]
1560 RETURN
1569 REM ********** READ ERROR MESSAGES
1570 RESTORE 1580:READ ME:DIM ER$[ME-1]:FOR I=0 TO ME-1:READ ER$[I]:NEXT:RETURN
1580 DATA 37
1590 DATA Mem full,Constant expected,'=' expected,Identifier expected,"':' missing",'.' expected,"';' missing",Undeclared indentifier,Illegal identifier,"':=' expected",'THEN' expected,'END' expected,'DO' expected,Incorrect symbol
1600 DATA Bad expression,Use of procedure identifier in expression,')' expected,Illegal factor,'BEGIN' expected,'OF' expected,Illegal hexadecimal constant,'TO' or "DOWNTO' expected,Number out of range,'(' expected,'[' expected,']' expected
1610 DATA Not enough parameters,Data type not recognised, Identifier declared twice,Empty string not allowed,"',' expected",'..' expected,Low bound larger than high bound,String not allowed,'PROGRAM' expected,'UNTIL' expected,Not enough indices
1619 REM ********** INTERNAL COMPILER ERROR
1620 PRINT TAB(C7)"^":PRINT"BUG":RETURN
1619 rem ********** GET NEXT CHARACTER
1630 WHILE C0>=L0:GOSUB 1650:WEND:C0=C0+1:X$=MID$(L$,C0,1):IF X$="	"THEN C8=C8+TABLEN-(C8 MOD TABLEN) ELSE C8=C8+1
1640 RETURN
1649 REM ********** GET NEXT INPUT LINE
1650 LINE.NR=LINE.NR+1:PRINT USING"#### ##### ";LINE.NR;C1;:F5=ABS(F5) MOD 2:ON F5+1 GOSUB 1700,1710:IF F5>0 THEN PRINT L$
1660 IF Y10 THEN PRINT#2,USING"#### ##### &";LINE.NR;C1;L$
1670 IF LEFT$(L$,1)="$"THEN IF mid$(L$,2,1)="+"THEN F5=F5+1:GOTO 1650 ELSE IF MID$(L$,2,1)="-"THEN F5=F5-1:GOTO 1650 ELSE PRINT SPC$(6)"^Ignored":GOTO 1650
1680 L$=L$+CR$:C0=0:C8=FIRSTINDENT:L0=LEN(L$)
1690 RETURN
1700 PRINT CHR$(8);:LINE INPUT L$:RETURN
1710 LINE INPUT#1,L$:RETURN
1719 REM ********** GET NEXT TOKEN
1720 WHILE X$=" "OR X$="	"OR X$=CR$:GOSUB 1630:WEND
1730 IF X$="{"THEN GOSUB 1630:WHILE X$<>"}":GOSUB 1630:WEND:GOSUB 1630:GOTO 1720
1740 C7=C8:C9=C0:IF X$>="A"AND X$<="Z"OR X$>="a"AND X$<="z"THEN 1750 ELSE IF X$>="0"AND X$<="9" THEN 1780 ELSE 1790
1750 K=0:WHILE X$>="A"AND X$<="Z"OR X$>="a"AND X$<="z"OR X$>="0"AND X$<="9"OR X$ ="_":K=K+1:REM IFT0S K<N2 THEN K=K+1
1760 GOSUB 1630:WEND:A$=MID$(L$,C9,K):AA$=A$:FOR K=1 TO LEN(A$):MID$(AA$,K,1)=FNUC$(MID$(AA$,K,1)):NEXT:IF INSTR(W0$,","+AA$+",")<>0 THEN S0$=AA$ ELSE S0$="IDENT"
1770 RETURN
1780 S0$="NUM":K=0:WHILE X$>="0"AND X$<="9":K=K+1:GOSUB 1630:WEND:N3!=VAL(MID$(L$,C9,K)):IF MININT<=N3! AND N3!<=MAXINT THEN N3=CINT(N3!):RETURN ELSE E9=23:GOTO 1520
1790 S0$=X$:GOSUB 1630:IF S0$="%"THEN 1800 ELSE IF S0$=":" THEN 1810 ELSE IF S0$="<" THEN 1820 ELSE IF S0$=">" THEN 1830 ELSE IF S0$="." THEN 1840 ELSE IF S0$="'" THEN 1850 ELSE RETURN
1800 IF X$>="0"AND X$<="9"OR FNUC$(X$)>="A"AND FNUC$(X$)<="F"THEN K=0:S0$="NUM":WHILE X$>="0"AND X$<="9"OR FNUC$(X$)>="A"AND FNUC$(X$)<="F":K=K+1:GOSUB 1630:WEND:IF K<=4 THEN N3=VAL("&H"+MID$(L$,C9+1,K)):RETURN ELSE E9=23:GOTO 1520 ELSE RETURN
1810 IF X$="=" THEN S0$=":=":GOTO 1630 ELSE RETURN
1820 IF X$="="THEN S0$="<=":GOTO 1630 ELSE IF X$=">"THEN S0$="<>":GOTO 1630 ELSE RETURN
1830 IF X$="=" THEN S0$=">=":GOSUB 1630:RETURN ELSE RETURN
1840 IF X$="." THEN S0$="..":GOTO 1630 ELSE RETURN
1850 C$=""
1860 IF X$="'"THEN GOSUB 1630:IF X$="'" THEN C$=C$+X$:GOSUB 1630:GOTO 1860 ELSE IF LEN(C$)=0 THEN E9=30:GOTO 1520 ELSE IF LEN(C$)=1 THEN S0$="CHR":RETURN ELSE S0$="STR":RETURN ELSE C$=C$+X$:GOSUB 1630:GOTO 1860
1870 GOSUB 1890:IF TI<>0 AND T1[TI]=L1 THEN TI=0:E9=29:GOTO 1520 ELSE T1=T1+1:T$[T1]=A$:T1[T1]=L1:TI=T1:RETURN
1880 GOSUB 1890:IF TI=0 THEN E9=8:GOTO 1520 ELSE RETURN
1890 T$[0]="":TI=T1:WHILE TI<>0 AND T$[TI]<>A$:TI=TI-1:WEND:RETURN
1900 K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:T0$[TI]="?":GOSUB 1720:K$="=":E=3:GOSUB 1510:GOSUB 1910:T0$[TI]="C":T2[TI]=CV:RETURN
1910 IF S0$="+"OR S0$="-"THEN Y$=S0$:GOSUB 1720 ELSE Y$=""
1920 GOSUB 2960:IF S0$="NUM"THEN CV=N3:GOTO 1940 ELSE IF S0$="CHR" THEN CV=ASC(C$):GOTO 1940 ELSE IF S0$="STR"THEN E9=34:GOSUB 1520:CV=ASC(C$):GOTO 1940
1930 K$="IDENT":E=2:GOSUB 1500:GOSUB 1880:CV=T2[TI]:IF T0$[TI]<>"C" THEN E9=9:GOSUB 1520
1940 GOSUB 2970:IF Y$="-"THEN CV=-CV
1950 GOTO 1720
1959 REM ********** PARSE LEFT SIDE OF ASSIGNMENT **********
1960 IF T0$[TI]="V"OR T0$[TI]="R" THEN 1720:REM VARIABLE OR FUNCTION RESULT
1970 IF T0$[TI]="S"THEN X=TI:GOSUB 2940:GOSUB 1720:K$="[":E=25:GOSUB 1510:GOSUB 2160:K$="]":E=26:GOSUB 1510:GOSUB 2950:TI=X:RETURN: REM MEM[INDEX]
1979 REM PARSE ARRAY INDICES
1980 GOSUB 1720:K$="[":E=25:GOSUB 1510:II=T3[TI]:NI=T2[II]:I=1:X=TI:GOSUB 2940:GOSUB 2010:WHILE I<NI AND S0$=",":GOSUB 1720:I=I+1:IF T2[II+I]<>1 THEN Q1=0:Q2=0:Q3=T2[II+I]:GOSUB 2980:Q1=1:Q3=4:GOSUB 2980
1990 GOSUB 2010:Q1=1:Q2=0:Q3=2:GOSUB 2980:WEND:IF I<NI THEN E9=37:GOSUB 1520
2000 K$="]":E=26:GOSUB 1510:GOSUB 2950:TI=X:IF T3[II]<>0 THEN Q1=0:Q2=0:Q3=T3[II]:GOSUB 2980:Q1=1:Q3=3:GOTO 2980 ELSE RETURN
2010 X=II:GOSUB 2940:X=NI:GOSUB 2940:X=I:GOSUB 2940:GOSUB 2160:GOSUB 2950:I=X:GOSUB 2950:NI=X:GOSUB 2950:II=X:RETURN
2020 IF T3[TI]=0 THEN RETURN ELSE K$="(":E=24:GOSUB 1510:I=1:GOSUB 2040:WHILE I<T3[TI]AND S0$=",":I=I+1:GOSUB 1720:GOSUB 2040:WEND:IF I<T3[TI]THEN E9=27:GOSUB 1520
2030 K$=")":E=17:GOTO 1510
2040 X=I:GOSUB 2940:X=TI:GOSUB 2940:GOSUB 2160:GOSUB 2950:TI=X:GOSUB 2950:I=X:RETURN
2050 IF S0$="IDENT"THEN 2060 ELSE IF S0$="NUM"THEN 2130 ELSE IF S0$="STR"THEN E9=34:GOSUB 1520:GOTO 2140 ELSE IF S0$="CHR"THEN 2140 ELSE IF S0$="("THEN GOSUB 1720:GOSUB 2160:K$=")":E=17:GOTO 1510 ELSE IF S0$="NOT"THEN 2150 ELSE E9=15:GOSUB 1520:STOP
2060 GOSUB 1880:IF TI=0 THEN 1720 ELSE IF T0$[TI]="V"OR T0$[TI]="A"OR T0$[TI]="S"THEN 2070 ELSE IF T0$[TI]="P"OR T0$[TI]="F"OR T0$[TI]="R"THEN 2080 ELSE IF T0$[TI]="C"THEN 2120 ELSE E9=9:GOTO 1520
2070 GOSUB 1960:GOTO 2490
2080 IF T0$[TI]="P"THEN E9=16:GOSUB 1520:GOSUB 1720:GOTO 2020
2090 IF T0$[TI]="R" THEN TI=TI-1
2100 IF T1[TI]<>-1 THEN Q1=5:Q2=0:Q3=1:GOSUB 2980:GOSUB 1720:GOSUB 2020:Q1=4:Q2=L1-T1[TI]:Q3=T2[TI]:GOSUB 2980:Q1=5:Q2=0:Q3=-T3[TI]:GOTO 2980
2110 GOSUB 1720:GOSUB 2020:Q1=1:Q2=0:Q3=T2[TI]:GOTO 2980
2120 Q1=0:Q2=0:Q3=T2[TI]:GOSUB 2980:GOTO 1720
2130 Q1=0:Q2=0:Q3=N3:GOSUB 2980:GOTO 1720
2140 Q1=0:Q2=0:Q3=ASC(C$):GOSUB 2980:GOTO 1720
2150 GOSUB 1720:GOSUB 2050:Q1=1:Q2=0:Q3=16:GOTO 2980
2158 REM ********** PARSE RELATIONAL EXPRESSION **********
2160 GOSUB 2190:IF S0$<>"="AND S0$<>"<>"AND S0$<>"<"AND S0$<>"<="AND S0$<>">"AND S0$<>">=" THEN RETURN
2170 Y$=S0$:GOSUB 2960:GOSUB 1720:GOSUB 2190:GOSUB 2970:IF Y$="="THEN Q3=8 ELSE IF Y$="<>"THEN Q3=9 ELSE IF Y$="<"THEN Q3=10 ELSE IF Y$=">="THEN Q3=11 ELSE IF Y$=">"THEN Q3=12 ELSE IF Y$="<="THEN Q3=13 ELSE GOSUB 1620:STOP
2180 Q1=1:Q2=0:GOTO 2980
2189 REM ********** PARSE ARITHMETICAL EXPRESSION **********
2190 IF S0$="+"OR S0$="-"THEN Y$=S0$:GOSUB 1720 ELSE Y$="+"
2200 GOSUB 2960:GOSUB 2240:GOSUB 2970:IF Y$="-"THEN Q1=1:Q2=0:Q3=1:GOSUB 2980
2210 WHILE S0$="+"OR S0$="-"OR S0$="OR":Y$=S0$:GOSUB 2960:GOSUB 1720:GOSUB 2240:GOSUB 2970:GOSUB 2220:WEND:RETURN
2220 IF Y$="+"THEN Q3=2 ELSE IF Y$="-"THEN Q3=3 ELSE IF Y$="OR" THEN Q3=14 ELSE GOSUB 1620:STOP
2230 Q1=1:Q2=0:GOTO 2980
2240 GOSUB 2050:WHILE S0$="*"OR S0$="DIV"OR S0$="MOD"OR S0$="AND"OR S0$="SHL"OR S0$="SHR":Y$=S0$:GOSUB 2960:GOSUB 1720:GOSUB 2050:GOSUB 2970:GOSUB 2250:WEND:RETURN
2250 IF Y$="*"THEN Q3=4 ELSE IF Y$="DIV"THEN Q3=5 ELSE IF Y$="MOD" THEN Q3=7 ELSE IF Y$="AND"THEN Q3=15 ELSE IF Y$="SHL"THEN Q3=17 ELSE IF Y$="SHR" THEN Q3=18 ELSE GOSUB 1620:STOP
2260 Q1=1:Q2=0:GOTO 2980
2269 REM *********** PARSE STATEMENTS **********
2270 IF S0$="IDENT"THEN 2280 ELSE IF S0$="BEGIN"THEN 2480 ELSE IF S0$="IF"THEN 2390 ELSE IF S0$="CASE"THEN 2320 ELSE IF S0$="WHILE" THEN 2460 ELSE IF S0$="REPEAT"THEN 2470 ELSE IF S0$="FOR"THEN 2410 ELSE RETURN
2280 GOSUB 1880:IF T0$[TI]="V"OR T0$[TI]="A"OR T0$[TI]="R"OR T0$[TI]="S"THEN 2290 ELSE IF T0$[TI]="P"THEN 2300 ELSE E9=9:GOSUB 1520:GOTO 1720
2289 REM *********** PARSE ASSIGNMENT **********
2290 GOSUB 1960:K$=":=":E=10:GOSUB 1510:X=TI:GOSUB 2940:GOSUB 2160:GOSUB 2950:TI=X:GOTO 2510
2300 IF T1[TI]=-1 THEN IF AA$="WRITELN"OR AA$="WRITE"THEN 2530 ELSE IF AA$="READ"THEN 2580 ELSE IF AA$="CALL" THEN 2601 ELSE GOSUB 1620:STOP
2310 GOSUB 1720:GOSUB 2020:Q1=4:Q2=L1-T1[TI]:Q3=T2[TI]:GOSUB 2980:IF T3[TI]<>0 THEN Q1=5:Q2=0:Q3=-T3[TI]:GOTO 2980 ELSE RETURN
2320 GOSUB 1720:GOSUB 2160:K$="OF":E=20:GOSUB 1510:X=C1:GOSUB 2940:NC=C1:GOSUB 2340:WHILE S0$=";":GOSUB 1720:GOSUB 2340:WEND:IF S0$="OTHERWISE"OR S0$="ELSE"THEN GOSUB 1720:X=NC:GOSUB 2940:GOSUB 2270:GOSUB 2950:NC=X
2330 GOSUB 2950:DC=X:WHILE NC<>DC:X=NC:GOSUB 3020:GOSUB 3040:NC=XC:WEND:K$="END":E=12:GOSUB 1510:Q1=5:Q2=0:Q3=-1:GOTO 2980
2340 IF S0$<>"+"AND S0$<>"-"AND S0$<>"CHR"AND S0$<>"NUM"THEN IF S0$="IDENT"THEN GOSUB 1890:IF T0$[TI]<>"C"THEN E9=2:GOSUB 1520 ELSE ELSE RETURN
2350 GOSUB 2360:K$=":":E=5:GOSUB 1510:X=NC:GOSUB 2940:X=FL:GOSUB 2940:GOSUB 2270:GOSUB 2950:FL=X:GOSUB 2950:NC=X:TC=NC:NC=C1:Q1=6:Q2=0:Q3=TC:GOSUB 2980:X=FL:GOSUB 3040:RETURN
2360 SC=C1:FC=SC:GOSUB 2370:WHILE S0$=",":GOSUB 1720:GOSUB 2370:WEND:WHILE SC<>FC:X=SC:GOSUB 3020:GOSUB 3040:SC=XC:WEND:RETURN
2370 GOSUB 1910:Q1=1:Q2=0:Q3=21:GOSUB 2980:Q1=0:Q3=CV:GOSUB 2980:Q1=1:Q3=8:GOSUB 2980:IF S0$=","THEN XC=C1:Q1=7:Q2=1:Q3=SC:GOSUB 2980:SC=XC ELSE FL=C1:Q1=7:Q2=0:GOSUB 2980
2380 RETURN
2390 GOSUB 1720:GOSUB 2160:X=C1:GOSUB 2940:Q1=7:Q2=0:GOSUB 2980:K$="THEN":E=11:GOSUB 1510:GOSUB 2270:IF S0$="ELSE"THEN GOSUB 2950:XC=X:X=C1:GOSUB 2940:Q1=6:Q2=0:GOSUB 2980:X=XC:GOSUB 3040:GOSUB 1720:GOSUB 2270
2400 GOTO 3030
2410 GOSUB 1720:K$="IDENT":E=4:GOSUB 1500:GOSUB 1880:IF T0$[TI]<>"V"AND T0$[TI]<>"R"THEN E9=9:GOSUB 1520
2420 GOSUB 2290:IF S0$<>"TO" THEN K$="DOWNTO":E=22:GOSUB 1500
2430 Y$=S0$:GOSUB 2960:GOSUB 1720:X=TI:GOSUB 2940:GOSUB 2160:GOSUB 2950:Q3=T2[T1]:TI=X:X=C1:GOSUB 2940:Q1=1:Q2=0:Q3=21:GOSUB 2980:Q1=2:Q2=L1-T1[TI]:Q3=T2[TI]:GOSUB 2980:GOSUB 2970:GOSUB 2960:Q1=1:Q2=0:IF Y$="TO" THEN Q3=11 ELSE Q3=13
2440 GOSUB 2980:X=C1:GOSUB 2940:Q1=7:Q2=0:GOSUB 2980:Q1=2:Q2=L1-T1[TI]:Q3=T2[TI]:GOSUB 2980:X=TI:GOSUB 2940:K$="DO":E=13:GOSUB 1510:GOSUB 2270:GOSUB 2950:TI=X:GOSUB 2970:Q1=1:Q2=0:IF Y$="TO" THEN Q3=19 ELSE Q3=20
2450 GOSUB 2980:Q1=3:Q2=L1-T1[TI]:Q3=T2[TI]:GOSUB 2980:GOSUB 2950:XC=X:GOSUB 2950:Q1=6:Q2=0:Q3=X:GOSUB 2980:X=XC:GOSUB 3040:Q1=5:Q2=0:Q3=-1:GOTO 2980
2460 GOSUB 1720:X=C1:GOSUB 2940:GOSUB 2160:X=C1:GOSUB 2940:Q1=7:Q2=0:GOSUB 2980:K$="DO":E=13:GOSUB 1510:GOSUB 2270:GOSUB 2950:XC=X:GOSUB 2950:Q1=6:Q2=0:Q3=X:GOSUB 2980:X=XC:GOTO 3040
2470 X=C1:GOSUB 2940:GOSUB 1720:GOSUB 2270:WHILE S0$=";":GOSUB 1720:GOSUB 2270:WEND:K$="UNTIL":E=36:GOSUB 1510:GOSUB 2160:GOSUB 2950:Q1=7:Q2=0:Q3=X:GOTO 2980
2480 GOSUB 1720:GOSUB 2270:WHILE S0$=";":GOSUB 1720:GOSUB 2270:WEND:K$="END":E=12:GOTO 1510
2490 IF T0$[TI]="S"THEN Q1=2:Q2=255:Q3=0:GOTO 2980 ELSE IF T0$[TI]="A"THEN Q1=&H12 ELSE Q1=2
2500 Q2=L1-T1[TI]:Q3=T2[TI]:GOTO 2980
2510 IF T0$[TI]="S"THEN Q1=3:Q2=255:Q3=0:GOTO 2980 ELSE IF T0$[TI]="A"THEN Q1=&H13 ELSE Q1=3
2520 Q2=L1-T1[TI]:Q3=T2[TI]:GOTO 2980
2530 Y$=AA$:GOSUB 1720:IF S0$="("THEN GOSUB 2960:GOSUB 1720:GOSUB 2550:WHILE S0$ =",":GOSUB 1720:GOSUB 2550:WEND:K$=")":E=17:GOSUB 1510:GOSUB 2970:IF Y$="WRITE"THEN RETURN ELSE ELSE IF Y$="WRITEZ"THEN E9=24:GOTO 1520
2540 Q1=0:Q2=0:Q3=13:GOSUB 2980:Q3=10:GOSUB 2980:Q3=2:GOSUB 2980:Q1=8:Q3=8:GOTO 2980
2550 IF S0$="STR"THEN Q1=0:Q2=0:FOR I=1 TO LEN(C$):Q3=ASC(MID$(C$,I,1)):GOSUB 2980:NEXT:Q3=LEN(C$):GOSUB 2980:Q1=8:Q3=8:GOSUB 2980:GOTO 1720 ELSE IF S0$="CHR" THEN Q1=0:Q2=0:Q3=ASC(C$):GOSUB 2980:Q1=8:Q3=1:GOSUB 2980:GOTO 1720
2560 GOSUB 2160:IF S0$="$"THEN Q3=1:GOSUB 1720 ELSE IF S0$="#"THEN Q3=3:GOSUB 1720 ELSE IF S0$="%"THEN Q3=5:GOSUB 1720 ELSE Q3=3
2570 Q1=8:Q2=0:GOTO 2980
2580 GOSUB 1720:K$="(":E=24:GOSUB 1510:GOSUB 2590:WHILE S0$=",":GOSUB 1720:GOSUB 2590:WEND:K$=")":E=17:GOTO 1510
2590 K$="IDENT":E=4:GOSUB 1500:GOSUB 1880:GOSUB 1960:IF S0$="$" THEN Q3=0:GOSUB 1720 ELSE IF S0$="#"THEN Q3=2:GOSUB 1720 ELSE IF S0$="%" THEN Q3=4:GOSUB 1720 ELSE Q3=2
2600 Q1=8:Q2=0:GOSUB 2980:GOTO 2510
2601 GOSUB 1720:K$="(":E=24:GOSUB 1510:GOSUB 2160:Q1=4:Q2=255:Q3=0:GOSUB 2980:K$=")":E=17:GOTO 1510
2609 REM ********** PARSE DECLARATIONS **********
2610 D0=3:X=BI:GOSUB 2940:Q1=6:Q2=0:GOSUB 2980: REM D0 KEEPS TRACK OF LOCAL STORAGE REQUIREMENTS. INITIALLY 3 WORDS REQUIRED FOR RETURN ADRESS, STATIC LINK AND DYNAMIC LINK
2620 IF S0$<>"CONST" THEN 2650
2630 GOSUB 1720
2640 GOSUB 1900:K$=";":E=7:GOSUB 1510:IF S0$="IDENT"THEN 2640 ELSE 2620
2650 IF S0$<>"VAR"THEN 2680
2660 GOSUB 1720
2670 GOSUB 2750:K$=";":E=7:GOSUB 1510:IF S0$="IDENT"THEN 2670 ELSE 2620
2680 IF S0$="PROCEDURE"THEN GOSUB 2850:K$=";":E=7:GOSUB 1510:GOTO 2620
2690 IF S0$="FUNCTION"THEN GOSUB 2870:K$=";":E=7:GOSUB 1510:GOTO 2620
2700 K$="BEGIN":E=19:GOSUB 1510:GOSUB 2950:BI=X:X=T2[BI]:GOSUB 3040:T2[BI]=C1
2710 Q1=5:Q2=0:Q3=D0:GOSUB 2980:REM RESERVE STACK SPACE FOR LOCAL STORAGE (INT 0, D0)
2720 GOSUB 2270:IF S0$=";"THEN GOSUB 1720:GOTO 2720
2730 K$="END":E=12:GOSUB 1510:GOSUB 3250
2740 Q1=1:Q2=0:Q3=0:GOSUB 2980:RETURN
2750 GOSUB 2760:K$=":":E=5:GOSUB 1510:GOSUB 2770:RETURN
2760 K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:VI=T1:GOSUB 1720:WHILE S0$=",":GOSUB 1720:K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:GOSUB 1720:WEND:RETURN
2770 IF S0$="INTEGER"OR S0$="CHAR"OR S0$="BOOLEAN"THEN 2780 ELSE IF S0$="ARRAY"THEN 2790 ELSE E9=28:GOTO 1500
2780 GOSUB 1720:FOR I=VI TO T1:T0$[I]="V":T2[I]=D0:D0=D0+1:NEXT:RETURN
2789 REM ********** PARSE ARRAY DECLARATION **********
2790 GOSUB 1720:LI=T1:T1=T1+1:T$[T1]="ARRAY":T0$[T1]="O":II=T1:REM LI INDEX IN SYMBOL TABLE OF LAST IDENTIFIER IN ARRAY DECLARATION LIST, II: INDEX OF SYMBOL TABLE ENTRY OF FIRST INDEX
2798 REM ********** PARSE INDEX LIST **********
2799 rem CHOMP "[", PROCESS COMMA SEPARATED LIST OF INDEX BOUNDS, CHOMP "]", CHOMP "OF"
2800 K$="[":E=25:GOSUB 1510:GOSUB 2820:K$="]":E=26:GOSUB 1510:K$="OF":E=20:GOSUB 1510:IF S0$="INTEGER"OR S0$="CHAR"OR S0$="BOOLEAN"THEN K$=S0$
2810 E=28:GOSUB 1510:FOR I=VI TO LI:T0$[I]="A":T2[I]=D0:T3[I]=II:D0=D0+TS:NEXT:T1[II]=TS:T2[II]=T1-II:T3[II]=TL:RETURN:REM CHOMP TYPE.
2820 TL=0:TS=1:GOSUB 2830:WHILE S0$=",":GOSUB 1720:GOSUB 2830:WEND:RETURN
2830 GOSUB 1910:LB=CV:K$="..":E=32:GOSUB 1510:GOSUB 1910:IF LB>CV THEN E9=33:GOSUB 1520:LB=HB
2840 T1=T1+1:T$[T1]="ARRAY":T0$[T1]="E":T1[T1]=LB:T2[T1]=CV-LB+1:TS=TS*T2[T1]:TL=TL*T2[T1]+T1[T1]:RETURN
2849 REM PARSE PROCEDURE DECLARATION
2850 GOSUB 1720:K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:T0$[T1]="P":T2[T1]=C1:BI=T1:X=D0:GOSUB 2940
2860 L1=L1+1:PI=T1+1:GOSUB 1720:GOSUB 2890:T3[BI]=T1-PI+1:K$=";":E=7:GOSUB 1510:GOSUB 2610:L1=L1-1:GOSUB 2950:D0=X:T1=BI:GOTO 3470
2869 REM PARSE FUNCTION DECLARATION
2870 GOSUB 1720:K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:T0$[TI]="F":T2[T1]=C1:BI=T1:X=D0:GOSUB 2940
2880 L1=L1+1:PI=T1+1:GOSUB 1870:T0$[T1]="R":GOSUB 1720:GOSUB 2890:GOSUB 3450:T3[BI]=T1-PI:K$=";":E=7:GOSUB 1510:GOSUB 2610:L1=L1-1:GOSUB 2950:D0=X:T1=BI:GOTO 3470
2890 IF S0$<>"("THEN 2920
2900 GOSUB 1720:K$="IDENT":E=4:GOSUB 1500:GOSUB 1870:T0$[T1]="V":GOSUB 1720:GOSUB 3460:IF S0$=","THEN 2900
2910 K$=")":E=17:GOSUB 1510
2920 FOR I=PI TO T1:T2[I]=I-T1-1:NEXT
2930 RETURN
2940 S[S9]=X:S9=S9+1:RETURN
2950 S9=S9-1:X=S[S9]:RETURN
2960 S$[P8]=Y$:P8=P8+1:RETURN
2970 P8=P8-1:Y$=S$[P8]:RETURN
2980 REM CO[PO]=Q1*256+Q2:CO[P9+1]=Q3:P9=P9+2
2981 LSET CO1$=MKI$(Q1*256+Q2):LSET CO2$=MKI$(Q3):PUT#3,C1+1
2990 C1=C1+1
3000 IF P9>=Q9 THEN E9=1:GOSUB 1520
3010 RETURN
3020 GET#3,P7\2+X+1:XC=CVI(CO2$):RETURN
3030 GOSUB 2950
3040 N=P7+X*2
3050 REM CO[N+1]=C1
3051 GET#3,N\2+1:LSET CO2$=MKI$(C1):PUT#3,N\2+1
3060 RETURN
3070 R=3
3080 U$="GENERATED P-CODES":PRINT U$:IF Y9 THEN PRINT#2,U$
3090 U$="  LOC:OPC   OPR1,  OPR2;":FOR I=0 TO R-1
3100 PRINT U$;:IF Y9 THEN PRINT#2,U$;
3110 NEXT
3120 PRINT:IF Y9 THEN PRINT#2,
3130 L=C1:N=L\R-((L MOD R)<>0):REM L=P9\2
3140 U$="#####:\ \! ####_,######;"
3150 FOR I=0 TO N-1:FOR J=0 TO R-1:K=I+J*N
3160 IF K<L THEN GOSUB 3200
3170 NEXT:PRINT:IF Y9 THEN PRINT#2,
3180 NEXT
3190 RETURN
3200 REM Q1=CO[2*K]\256:Q2=CO[2*K] MOD 256:Q3=CO[2*K+1]
3201 GET#3,K+1:Q1=CVI(CO1$)\256:Q2=CVI(CO1$) MOD 256:Q3=CVI(CO2$)
3210 IF Y9 THEN PRINT#2,USING U$;K;M$[Q1 MOD 16];STRING$(-(Q1>15),"X");Q2;Q3;:PRINT USING U$;K;M$[Q1 MOD 16];STRING$(-(Q1>15),"X");Q2;Q3;
3220 RETURN
3230 GOSUB 1720:PRINT:PRINT S0$,A$ 
3240 GOTO 3230
3250 IF NOT Y12 THEN 3400
3260 B$=T$[BI]+":LEVEL = "+STR$(L1):PRINT:PRINT B$:IF Y9 THEN PRINT#2,B$
3270 FOR I=BI TO T1:IF T1[I]<>L1 OR T0$[I]="O"OR T0$[I]="E"OR T0$[I]="M"OR T0$[I]="S"THEN 3390
3280 IF LEN(T$[I])<=8 THEN PRINT USING"\      \: ";T$[I]; ELSE PRINT T$[I];":":PRINT SPACE$(8);": ";
3290 IF Y12 THEN IF LEN(T$[1])<=8 THEN PRINT#2,USING"\      \: ";T$[I]; ELSE PRINT#2,T$[I];":":PRINT#2,SPACE$(8);": ";
3300 IF T0$[I]="C"THEN B$="CONSTANT":C$="VALUE"
3310 IF T0$[I]="V"THEN C$="OFFSET":IF T2[I]<0 THEN B$="PARAMETER"ELSE B$="VARIABLE"
3320 IF T0$[I]="A" THEN GOSUB 3410:GOTO 3390
3330 IF T0$[I]="R"THEN B$="FUNC. RESULT":C$="OFFSET"
3340 IF T0$[I]="P"THEN B$="PROCEDURE"
3350 IF T0$[I]="F" THEN B$="FUNCTION"
3360 IF T0$[I]="P"OR T0$[I]="F"THEN B$=B$+"("+MID$(STR$(T3[I]),2)+")":C$="ADDRESS"
3370 PRINT USING"\          \";B$;:PRINT" :";C$;"=";T2[I]
3380 IF Y10 THEN PRINT#2,USING"\          \";B$;:PRINT#2," :";C$;"=";T2[I]
3390 NEXT:PRINT:IF Y10 THEN PRINT#2,
3400 RETURN
3410 B$="ARRAY[":FOR J=T3[I]+1 TO T3[I]+T2[T3[I]]:B$=B$+STR$(T1[J])+".."+STR$(T1[J]+T2[J]-1)+",":NEXT:MID$(B$,LEN(B$),1)="]":B$=B$+":OFFSET ="+STR$(T2[I]):PRINT B$:IF Y10 THEN PRINT#2,B$
3420 RETURN
3430 IF S0$="INTEGER"OR S0$="CHAR"OR S0$="BOOLEAN"THEN K$=S0$
3440 E=28:GOTO 1510
3450 K$=":":E=4:GOSUB 1510:GOTO 3430
3460 IF S0$=":"THEN 3450 ELSE RETURN:REM PARSE OPTIONAL ": <TYPE>"
3470 IF S0$<>"IDENT"THEN RETURN:REM PARSE OPTIONAL PROCEDURE/FUNCTION/PROGRAM NAME AFTER STATEMENT BLOCK "END"
3480 IF A$<>T$[T1]THEN E9=9:GOSUB 1520
3490 GOTO 1720
4000 FOR I=0 TO T1:PRINT USING"###:\          \:& ######,######,######";I;T$[I],T0$[I],T1[I],T2[I],T3[I]:NEXT:RETURN
5000 REM S0$: CURRENT SYMBOL
5001 REM X$: CURRENT INPUT CHARACTER
5002 REM: BI: INDEX IN SYMBOL TABLE WHERE CURRENT SCOPE STARTS
5003 REM: N3: VALUE (NUMERICAL) OF CURRENT SYMBOL
5004 REM: C$: VALUE (STRING) OF CURRENT SYMBOL
5005 REM: C1: P-CODE PROGRAM INDEX COUNTER
5006 REM: TDRIVER=0: MANUAL CONTROL, TDRIVER=1: AUTOMATIC CONTROL: THE P-CODE TO 8080 CODE TRANSLATOR IS CALLED UP AUTOMATICALLY AFTER SUCCESSFUL COMPILE
5007 REM: VI: WHEN PARSING A LIST, MARKS THE FIRST NAME IN THE SYMBOL TABLE OF THAT LIST. EG, IN "I, J, K : INTEGER", VI MARKS THE POSITION OF I IN THE SYMBOL TABLE
5008 REM: C0: CHARACTER POSITION IN INPUT LINE
5008 REM: C7: COLUMN POSITION IN INPUT LINE OF CURRENT TOKEN, CORRECTED FOR TABS
5009 REM: C8: CHARACTER POSITION IN INPUT LINE, CORRECTED FOR TABS
6000 GOSUB 1720:REM GET NEXT SYMBOL IN S0$
6010 GOSUB 1630:REM GET NEXT CHARACTER IN X$
6020 GOSUB 1870:REM SYMBOL TABLE STORE OF A$, LEVEL L1
6020 GOSUB 1880:REM SYMBOL TABLE LOOKUP OF A$
6030 GOSUB 1620:REM REPORT AN INTERNAL COMPILER BUG AND STOP
6040 GOSUB 2980:REM STORE P-CODE IN Q1, Q2, Q3 IN P-CODE FILE
6050 GOSUB 2960:REM PUSH Y$ ON STACK
6060 GOSUB 2970:REM POP Y$ FROM STACK
6070 GOSUB 2940:REM PUSH X ON STACK
6080 GOSUB 2950:REM POP X FROM STACK

